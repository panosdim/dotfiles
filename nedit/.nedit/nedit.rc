! Preferences file for NEdit
! (User settings in X "application defaults" format)
!
! This file is overwritten by the "Save Defaults..." command in NEdit
! and serves only the interactively settable options presented in the NEdit
! "Preferences" menu.  To modify other options, such as key bindings, use
! the .Xdefaults file in your home directory (or the X resource
! specification method appropriate to your system).  The contents of this
! file can be moved into an X resource file, but since resources in this file
! override their corresponding X resources, either this file should be 
! deleted or individual resource lines in the file should be deleted for the
! moved lines to take effect.

nedit.fileVersion: 5.6
nedit.shellCommands: \
	spell:Alt+B:s:EX:\n\
		cat>spellTmp; xterm -e ispell -x spellTmp; cat spellTmp; rm spellTmp\n\
	wc::w:ED:\n\
		wc | awk '{print $1 " lines, " $2 " words, " $3 " characters"}'\n\
	sort::o:EX:\n\
		sort\n\
	number lines::n:AW:\n\
		nl -ba\n\
	make:Alt+Z:m:W:\n\
		make\n\
	expand::p:EX:\n\
		expand\n\
	unexpand::u:EX:\n\
		unexpand\n
nedit.macroCommands: \
	Complete Word:Alt+D::: {\n\
		# This macro attempts to complete the current word by\n\
		# finding another word in the same document that has\n\
		# the same prefix; repeated invocations of the macro\n\
		# (by repeated typing of its accelerator, say) cycles\n\
		# through the alternatives found.\n\
		# \n\
		# Make sure $compWord contains something (a dummy index)\n\
		$compWord[""] = ""\n\
		\n\
		# Test whether the rest of $compWord has been initialized:\n\
		# this avoids having to initialize the global variable\n\
		# $compWord in an external macro file\n\
		if (!("wordEnd" in $compWord)) {\n\
		    # we need to initialize it\n\
		    $compWord["wordEnd"] = 0\n\
		    $compWord["repeat"] = 0\n\
		    $compWord["init"] = 0\n\
		    $compWord["wordStart"] = 0\n\
		}\n\
		\n\
		if ($compWord["wordEnd"] == $cursor) {\n\
		        $compWord["repeat"] += 1\n\
		}\n\
		else {\n\
		   $compWord["repeat"] = 1\n\
		   $compWord["init"] = $cursor\n\
		\n\
		   # search back to a word boundary to find the word to complete\n\
		   # (we use \\w here to allow for programming "words" that can include\n\
		   # digits and underscores; use \\l for letters only)\n\
		   $compWord["wordStart"] = search("<\\\\w+", $cursor, "backward", "regex", "wrap")\n\
		\n\
		   if ($compWord["wordStart"] == -1)\n\
		      return\n\
		\n\
		    if ($search_end == $cursor)\n\
		       $compWord["word"] = get_range($compWord["wordStart"], $cursor)\n\
		    else\n\
		        return\n\
		}\n\
		s = $cursor\n\
		for (i=0; i <= $compWord["repeat"]; i++)\n\
		    s = search($compWord["word"], s - 1, "backward", "regex", "wrap")\n\
		\n\
		if (s == $compWord["wordStart"]) {\n\
		   beep()\n\
		   $compWord["repeat"] = 0\n\
		   s = $compWord["wordStart"]\n\
		   se = $compWord["init"]\n\
		}\n\
		else\n\
		   se = search(">", s, "regex")\n\
		\n\
		replace_range($compWord["wordStart"], $cursor, get_range(s, se))\n\
		\n\
		$compWord["wordEnd"] = $cursor\n\
	}\n\
	Fill Sel. w/Char:::R: {\n\
		# This macro replaces each character position in\n\
		# the selection with the string typed into the dialog\n\
		# it displays.\n\
		if ($selection_start == -1) {\n\
		    beep()\n\
		    return\n\
		}\n\
		\n\
		# Ask the user what character to fill with\n\
		fillChar = string_dialog("Fill selection with what character?", \\\n\
		                         "OK", "Cancel")\n\
		if ($string_dialog_button == 2 || $string_dialog_button == 0)\n\
		    return\n\
		\n\
		# Count the number of lines (NL characters) in the selection\n\
		# (by removing all non-NLs in selection and counting the remainder)\n\
		nLines = length(replace_in_string(get_selection(), \\\n\
		                                  "^.*$", "", "regex"))\n\
		\n\
		rectangular = $selection_left != -1\n\
		\n\
		# work out the pieces of required of the replacement text\n\
		# this will be top mid bot where top is empty or ends in NL,\n\
		# mid is 0 or more lines of repeats ending with NL, and\n\
		# bot is 0 or more repeats of the fillChar\n\
		\n\
		toplen = -1 # top piece by default empty (no NL)\n\
		midlen = 0\n\
		botlen = 0\n\
		\n\
		if (rectangular) {\n\
		    # just fill the rectangle:  mid\\n \\ nLines\n\
		    #                           mid\\n /\n\
		    #                           bot   - last line with no nl\n\
		    midlen = $selection_right -  $selection_left\n\
		    botlen = $selection_right -  $selection_left\n\
		} else {\n\
		    #                  |col[0]\n\
		    #         .........toptoptop\\n                      |col[0]\n\
		    # either  midmidmidmidmidmid\\n \\ nLines - 1   or ...botbot...\n\
		    #         midmidmidmidmidmid\\n /                          |col[1]\n\
		    #         botbot...         |\n\
		    #                 |col[1]   |wrap margin\n\
		    # we need column positions col[0], col[1] of selection start and\n\
		    # end (use a loop and arrays to do the two positions)\n\
		    sel[0] = $selection_start\n\
		    sel[1] = $selection_end\n\
		\n\
		    # col[0] = pos_to_column($selection_start)\n\
		    # col[1] = pos_to_column($selection_end)\n\
		\n\
		    for (i = 0; i < 2; ++i) {\n\
		        end = sel[i]\n\
		        pos = search("^", end, "regex", "backward")\n\
		        thisCol = 0\n\
		        while (pos < end) {\n\
		            nexttab = search("\\t", pos)\n\
		            if (nexttab < 0 || nexttab >= end) {\n\
		                thisCol += end - pos # count remaining non-tabs\n\
		                nexttab = end\n\
		            } else {\n\
		                thisCol += nexttab - pos + $tab_dist\n\
		                thisCol -= (thisCol % $tab_dist)\n\
		            }\n\
		            pos = nexttab + 1 # skip past the tab or end\n\
		        }\n\
		        col[i] = thisCol\n\
		    }\n\
		    toplen = max($wrap_margin - col[0], 0)\n\
		    botlen = min(col[1], $wrap_margin)\n\
		\n\
		    if (nLines == 0) {\n\
		        toplen = -1\n\
		        botlen = max(botlen - col[0], 0)\n\
		    } else {\n\
		        midlen = $wrap_margin\n\
		        if (toplen < 0)\n\
		            toplen = 0\n\
		        nLines-- # top piece will end in a NL\n\
		    }\n\
		}\n\
		\n\
		# Create the fill text\n\
		# which is the longest piece? make a line of that length\n\
		# (use string doubling - this allows the piece to be\n\
		# appended to double in size at each iteration)\n\
		\n\
		len = max(toplen, midlen, botlen)\n\
		charlen = length(fillChar) # maybe more than one char given!\n\
		\n\
		line = ""\n\
		while (len > 0) {\n\
		    if (len % 2)\n\
		        line = line fillChar\n\
		    len /= 2\n\
		    if (len > 0)\n\
		        fillChar = fillChar fillChar\n\
		}\n\
		# assemble our pieces\n\
		toppiece = ""\n\
		midpiece = ""\n\
		botpiece = ""\n\
		if (toplen >= 0)\n\
		    toppiece = substring(line, 0, toplen * charlen) "\\n"\n\
		if (botlen > 0)\n\
		    botpiece = substring(line, 0, botlen * charlen)\n\
		\n\
		# assemble midpiece (use doubling again)\n\
		line = substring(line, 0, midlen * charlen) "\\n"\n\
		while (nLines > 0) {\n\
		    if (nLines % 2)\n\
		        midpiece = midpiece line\n\
		    nLines /= 2\n\
		    if (nLines > 0)\n\
		        line = line line\n\
		}\n\
		# Replace the selection with the complete fill text\n\
		replace_selection(toppiece midpiece botpiece)\n\
	}\n\
	Quote Mail Reply:::: {\n\
		if ($selection_start == -1)\n\
		    replace_all("^.*$", "\\\\> &", "regex")\n\
		else\n\
		    replace_in_selection("^.*$", "\\\\> &", "regex")\n\
	}\n\
	Unquote Mail Reply:::: {\n\
		if ($selection_start == -1)\n\
		    replace_all("(^\\\\> )(.*)$", "\\\\2", "regex")\n\
		else\n\
		    replace_in_selection("(^\\\\> )(.*)$", "\\\\2", "regex")\n\
	}\n\
	Comments>/* Comment */@C@C++@Java@CSS@JavaScript@Lex:::R: {\n\
		selStart = $selection_start\n\
		selEnd = $selection_end\n\
		replace_range(selStart, selEnd, "/* " get_selection() " */")\n\
		select(selStart, selEnd + 6)\n\
	}\n\
	Comments>/* Uncomment */@C@C++@Java@CSS@JavaScript@Lex:::R: {\n\
		pos = search("(?n\\\\s*/\\\\*\\\\s*)", $selection_start, "regex")\n\
		start = $search_end\n\
		end = search("(?n\\\\*/\\\\s*)", $selection_end, "regex", "backward")\n\
		if (pos != $selection_start || end == -1 )\n\
		    return\n\
		replace_selection(get_range(start, end))\n\
		select(pos, $cursor)\n\
	}\n\
	Comments>// Comment@C@C++@Java@JavaScript:Ctrl+7::R: {\n\
		replace_in_selection("^.*$", "// &", "regex")\n\
	}\n\
	Comments>// Uncomment@C@C++@Java@JavaScript:Shift+Ctrl+Slash::R: {\n\
		replace_in_selection("(^[ \\\\t]*// ?)(.*)$", "\\\\2", "regex")\n\
	}\n\
	Comments># Comment@Perl@Sh Ksh Bash@NEdit Macro@Makefile@Awk@Csh@Python@Tcl:::R: {\n\
		replace_in_selection("^.*$", "#&", "regex")\n\
	}\n\
	Comments># Uncomment@Perl@Sh Ksh Bash@NEdit Macro@Makefile@Awk@Csh@Python@Tcl:::R: {\n\
		replace_in_selection("(^[ \\\\t]*#)(.*)$", "\\\\2", "regex")\n\
	}\n\
	Comments>-- Comment@SQL:::R: {\n\
		replace_in_selection("^.*$", "--&", "regex")\n\
	}\n\
	Comments>-- Uncomment@SQL:::R: {\n\
		replace_in_selection("(^[ \\\\t]*--)(.*)$", "\\\\2", "regex")\n\
	}\n\
	Comments>! Comment@X Resources:::R: {\n\
		replace_in_selection("^.*$", "!&", "regex")\n\
	}\n\
	Comments>! Uncomment@X Resources:::R: {\n\
		replace_in_selection("(^[ \\\\t]*!)(.*)$", "\\\\2", "regex")\n\
	}\n\
	Comments>% Comment@LaTeX:::R: {\n\
		replace_in_selection("^.*$", "%&", "regex")\n\
	}\n\
	Comments>% Uncomment@LaTeX:::R: {\n\
		replace_in_selection("(^[ \\\\t]*%)(.*)$", "\\\\2", "regex")\n\
	}\n\
	Comments>Bar Comment@C:::R: {\n\
		if ($selection_left != -1) {\n\
		    dialog("Selection must not be rectangular")\n\
		    return\n\
		}\n\
		start = $selection_start\n\
		end = $selection_end-1\n\
		origText = get_range($selection_start, $selection_end-1)\n\
		newText = "/*\\n" replace_in_string(get_range(start, end), \\\n\
		    "^", " * ", "regex") "\\n */\\n"\n\
		replace_selection(newText)\n\
		select(start, start + length(newText))\n\
	}\n\
	Comments>Bar Uncomment@C:::R: {\n\
		selStart = $selection_start\n\
		selEnd = $selection_end\n\
		pos = search("/\\\\*\\\\s*\\\\n", selStart, "regex")\n\
		if (pos != selStart) return\n\
		start = $search_end\n\
		end = search("\\\\n\\\\s*\\\\*/\\\\s*\\\\n?", selEnd, "regex", "backward")\n\
		if (end == -1 || $search_end < selEnd) return\n\
		newText = get_range(start, end)\n\
		newText = replace_in_string(newText,"^ *\\\\* ?", "", "regex", "copy")\n\
		if (get_range(selEnd, selEnd - 1) == "\\n") selEnd -= 1\n\
		replace_range(selStart, selEnd, newText)\n\
		select(selStart, selStart + length(newText))\n\
	}\n\
	Make C Prototypes@C@C++:::: {\n\
		# simplistic extraction of C function prototypes, usually good enough\n\
		if ($selection_start == -1) {\n\
		    start = 0\n\
		    end = $text_length\n\
		} else {\n\
		    start = $selection_start\n\
		    end = $selection_end\n\
		}\n\
		string = get_range(start, end)\n\
		# remove all C++ and C comments, then all blank lines in the extracted range\n\
		string = replace_in_string(string, "//.*$", "", "regex", "copy")\n\
		string = replace_in_string(string, "(?n/\\\\*.*?\\\\*/)", "", "regex", "copy")\n\
		string = replace_in_string(string, "^\\\\s*\\n", "", "regex", "copy")\n\
		nDefs = 0\n\
		searchPos = 0\n\
		prototypes = ""\n\
		staticPrototypes = ""\n\
		for (;;) {\n\
		    headerStart = search_string(string, \\\n\
		        "^[a-zA-Z]([^;#\\"'{}=><!/]|\\n)*\\\\)[ \\t]*\\n?[ \\t]*\\\\{", \\\n\
		        searchPos, "regex")\n\
		    if (headerStart == -1)\n\
		        break\n\
		    headerEnd = search_string(string, ")", $search_end,"backward") + 1\n\
		    prototype = substring(string, headerStart, headerEnd) ";\\n"\n\
		    if (substring(string, headerStart, headerStart+6) == "static")\n\
		        staticPrototypes = staticPrototypes prototype\n\
		    else\n\
		        prototypes = prototypes prototype\n\
		    searchPos = headerEnd\n\
		    nDefs++\n\
		}\n\
		if (nDefs == 0) {\n\
		    dialog("No function declarations found")\n\
		    return\n\
		}\n\
		new()\n\
		focus_window("last")\n\
		replace_range(0, 0, prototypes staticPrototypes)\n\
	}\n\
	Select block:Ctrl+B::: {\n\
		# Tuning parameters\n\
		NumberUp=0\n\
		NumberDown=0\n\
		\n\
		# Search back to a word boundary to find the word to complete\n\
		keyUp=$cursor\n\
		keyDown=$cursor\n\
		\n\
		while (NumberUp<=NumberDown)\n\
		{\n\
		  keyUp = search("{", keyUp-1,"backward")\n\
		  if (keyUp == -1) {\n\
		    beep()\n\
		    return\n\
		  }\n\
		  else {\n\
		    NumberUp++\n\
		  }\n\
		  keyDown = search("}", keyDown-1,"backward")\n\
		  if (keyDown > keyUp) {\n\
		    NumberDown++\n\
		  }\n\
		  else\n\
		  {\n\
		    break\n\
		  }\n\
		}\n\
		storekeyUp=keyUp\n\
		keyUp=$cursor\n\
		keyDown=$cursor\n\
		NumberUp=0\n\
		NumberDown=0\n\
		while (NumberUp<=NumberDown)\n\
		{\n\
		  keyDown = search("}", keyDown+1,"forward")\n\
		  if (keyDown == -1) {\n\
		    beep()\n\
		    return\n\
		  }\n\
		  else {\n\
		    NumberDown++\n\
		  }\n\
		  keyUp = search("{", keyUp+1,"forward")\n\
		  if ((keyUp!=-1) && (keyUp < keyDown)) {\n\
		    NumberUp++\n\
		  }\n\
		  else\n\
		  {\n\
		    break\n\
		  }\n\
		}\n\
		select(storekeyUp,keyDown+1)\n\
	}\n\
	Goto header/source file:F4::: {\n\
		if (search_string($file_name, ".h", 0) != -1) {\n\
		  read_file($file_path substring($file_name, 0, length($file_name)-2) ".cpp")\n\
		  if ($read_status == 1)\n\
		    open($file_path substring($file_name, 0, length($file_name)-2) ".cpp")\n\
		  else\n\
		    open($file_path substring($file_name, 0, length($file_name)-2) ".c")\n\
		}\n\
		else\n\
		  if (search_string($file_name, ".cpp", 0) != -1)\n\
		    open($file_path substring($file_name, 0, length($file_name)-4) ".h")\n\
		  else\n\
		    open($file_path substring($file_name, 0, length($file_name)-2) ".h")\n\
	}\n\
	View Manfile:F1::: {\n\
		if ($selection_start == -1)\n\
		   c = string_dialog("man page for:")\n\
		else\n\
		   c = get_selection()\n\
		p = shell_command("man "c, "")\n\
		write_file(p, "/tmp/man "c)\n\
		open("/tmp/man "c)\n\
	}\n\
	Find All:F7::: {\n\
		jf_find_all()\n\
	}\n\
	Clear Find All:Shift+F7::: {\n\
		jf_clear_find_all()\n\
	}\n\
	Update and load tags file:Shift+Ctrl+D::: {\n\
		save()\n\
		shell_command("ctags -w -o .tags *", "")\n\
		load_tags_file($file_path"/.tags")\n\
	}\n\
	Marks>mark_line:F5::: {\n\
		jf_mark_line(1)\n\
	}\n\
	Marks>unmark_line:Shift+F5::: {\n\
		jf_mark_line(-1)\n\
	}\n\
	Marks>next_mark:F6::: {\n\
		jf_next_mark(1)\n\
	}\n\
	Marks>previous_mark:Shift+F6::: {\n\
		jf_next_mark(-1)\n\
	}\n\
	Marks>clear_all_marks:Shift+Ctrl+F5::: {\n\
		jf_clear_all_marks()\n\
	}\n\
	Format File:F2::: {\n\
		save()\n\
		# Backup current line\n\
		bline = $line\n\
		shell_command("astyle " $file_name, "")\n\
		select_all()\n\
		delete()\n\
		include_file($file_path $file_name)\n\
		goto_line_number(bline)\n\
		save()\n\
		shell_command("rm -f " $file_name ".orig", "")\n\
	}\n
nedit.bgMenuCommands: \
	Undo:::: {\n\
		undo()\n\
	}\n\
	Redo:::: {\n\
		redo()\n\
	}\n\
	Cut:::R: {\n\
		cut_clipboard()\n\
	}\n\
	Copy:::R: {\n\
		copy_clipboard()\n\
	}\n\
	Paste:::: {\n\
		paste_clipboard()\n\
	}\n
nedit.highlightPatterns: Ada:Default\n\
	Awk:Default\n\
	C++:Default\n\
	C:Default\n\
	CSS:Default\n\
	Csh:Default\n\
	Fortran:Default\n\
	Java:Default\n\
	JavaScript:Default\n\
	LaTeX:Default\n\
	Lex:Default\n\
	Makefile:Default\n\
	Matlab:Default\n\
	NEdit Macro:Default\n\
	Pascal:Default\n\
	Perl:Default\n\
	PostScript:Default\n\
	Python:Default\n\
	Regex:Default\n\
	SGML HTML:Default\n\
	SQL:Default\n\
	Sh Ksh Bash:Default\n\
	Tcl:Default\n\
	VHDL:Default\n\
	Verilog:Default\n\
	XML:Default\n\
	X Resources:Default\n\
	Yacc:Default
nedit.languageModes: 	Ada:.ada .ad .ads .adb .a:::::::\n\
	Awk:.awk:::::::\n\
	C++:.cc .hh .C .H .i .cxx .hxx .cpp .c++::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~":\n\
	C:.c .h::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~":\n\
	CSS:css::Auto:None:::".,/\\`'!|@#%^&*()=+{}[]"":;<>?~":\n\
	Csh:.csh .cshrc .tcshrc .login .logout:"^[ \\t]*#[ \\t]*![ \\t]*/bin/t?csh"::::::\n\
	Fortran:.f .f77 .for:::::::\n\
	Java:.java:::::::\n\
	JavaScript:.js:::::::\n\
	LaTeX:.tex .sty .cls .ltx .ins .clo .fd:::::::\n\
	Lex:.lex:::::::\n\
	Makefile:Makefile makefile .gmk:::None:8:8::\n\
	Matlab:.m .oct .sci:::::::\n\
	NEdit Macro:.nm .neditmacro:::::::\n\
	Pascal:.pas .p .int:::::::\n\
	Perl:.pl .pm .p5 .PL:"^[ \\t]*#[ \\t]*!.*perl":Auto:None:::".,/\\\\`'!$@#%^&*()-=+{}[]"":;<>?~|":\n\
	PostScript:.ps .eps .epsf .epsi:"^%!":::::"/%(){}[]<>":\n\
	Python:.py:"^#!.*python":Auto:None:::"!""#$%&'()*+,-./:;<=>?@[\\\\]^`{|}~":\n\
	Regex:.reg .regex:"\\(\\?[:#=!iInN].+\\)":None:Continuous::::\n\
	SGML HTML:.sgml .sgm .html .htm:"\\<[Hh][Tt][Mm][Ll]\\>"::::::\n\
	SQL:.sql:::::::\n\
	Sh Ksh Bash:.sh .bash .ksh .profile .bashrc .bash_logout .bash_login .bash_profile:"^[ \\t]*#[ \\t]*![ \\t]*/.*bin/(bash|ksh|sh|zsh)"::::::\n\
	Tcl:.tcl .tk .itcl .itk::Smart:None::::\n\
	VHDL:.vhd .vhdl .vdl:::::::\n\
	Verilog:.v:::::::\n\
	XML:.xml .xsl .dtd:"\\<(?i\\?xml|!doctype)"::None:::"<>/=""'()+*?|":\n\
	X Resources:.Xresources .Xdefaults .nedit .pats nedit.rc:"^[!#].*([Aa]pp|[Xx]).*[Dd]efaults"::::::\n\
	Yacc:.y::::::".,/\\`'!|@#%^&*()-=+{}[]"":;<>?~":
nedit.styles: 	Plain:black:Plain\n\
	Comment:gray20:Italic\n\
	Keyword:black:Bold\n\
	Operator:dark blue:Bold\n\
	Bracket:dark blue:Bold\n\
	Storage Type:brown:Bold\n\
	Storage Type1:saddle brown:Bold\n\
	String:darkGreen:Plain\n\
	String1:SeaGreen:Plain\n\
	String2:darkGreen:Bold\n\
	Preprocessor:RoyalBlue4:Plain\n\
	Preprocessor1:blue:Plain\n\
	Character Const:darkGreen:Plain\n\
	Numeric Const:darkGreen:Plain\n\
	Identifier:brown:Plain\n\
	Identifier1:RoyalBlue4:Plain\n\
	Identifier2:SteelBlue:Plain\n\
	Subroutine:brown:Plain\n\
	Subroutine1:chocolate:Plain\n\
	Ada Attributes:plum:Bold\n\
	Label:red:Italic\n\
	Flag:red:Bold\n\
	Text Comment:SteelBlue4:Italic\n\
	Text Key:VioletRed4:Bold\n\
	Text Key1:VioletRed4:Plain\n\
	Text Arg:RoyalBlue4:Bold\n\
	Text Arg1:SteelBlue4:Bold\n\
	Text Arg2:RoyalBlue4:Plain\n\
	Text Escape:gray30:Bold\n\
	LaTeX Math:darkGreen:Plain\n\
	Pointer:#660000:Bold\n\
	Regex:#009944:Bold\n\
	Warning:brown2:Italic
nedit.smartIndentInit: 	C:Default\n\
	C++:Default\n\
	Python:Default\n\
	Matlab:Default
nedit.smartIndentInitCommon: Default
nedit.autoWrap: Continuous
nedit.wrapMargin: 0
nedit.autoIndent: Smart
nedit.autoSave: True
nedit.openInTab: True
nedit.saveOldVersion: False
nedit.showMatching: Delimiter
nedit.matchSyntaxBased: True
nedit.highlightSyntax: True
nedit.backlightChars: False
nedit.searchDialogs: False
nedit.beepOnSearchWrap: False
nedit.retainSearchDialogs: False
nedit.searchWraps: True
nedit.stickyCaseSenseButton: True
nedit.repositionDialogs: True
nedit.autoScroll: False
nedit.appendLF: True
nedit.sortOpenPrevMenu: True
nedit.statisticsLine: True
nedit.iSearchLine: True
nedit.sortTabs: False
nedit.tabBar: True
nedit.tabBarHideOne: True
nedit.toolTips: True
nedit.globalTabNavigate: False
nedit.lineNumbers: True
nedit.pathInWindowsMenu: True
nedit.warnFileMods: True
nedit.warnRealFileMods: True
nedit.warnExit: True
nedit.searchMethod: Literal
nedit.textRows: 40
nedit.textCols: 80
nedit.tabDistance: 4
nedit.emulateTabs: 0
nedit.insertTabs: False
nedit.textFont: -*-courier-medium-r-normal--14-*-*-*-*-iso8859-1
nedit.boldHighlightFont: -*-courier-bold-r-normal--14-*-*-*-*-iso8859-1
nedit.italicHighlightFont: -*-courier-medium-o-normal--14-*-*-*-*-iso8859-1
nedit.boldItalicHighlightFont: -*-courier-bold-o-normal--14-*-*-*-*-iso8859-1
nedit.textFgColor: black
nedit.textBgColor: rgb:e5/e5/e5
nedit.selectFgColor: black
nedit.selectBgColor: rgb:cc/cc/cc
nedit.hiliteFgColor: white
nedit.hiliteBgColor: red
nedit.lineNoFgColor: black
nedit.cursorFgColor: black
nedit.shell: /bin/bash
nedit.smartTags: True
nedit.prefFileRead: True
nedit.titleFormat: {%c} [%s] %f (%S) - %d
